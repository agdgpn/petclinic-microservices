pipeline { 
    environment
    {
        DOCKER_TAG = "v.${BUILD_ID}.0"
        DOCKER_PASS = credentials("DOCKER_HUB_PASS")
    }                
    agent {
        kubernetes {
            cloud 'testing-kube'
            yamlFile 'pipeline/jenkins/agent/pod.yaml'
            serviceAccount 'jenkins-admin'
            namespace 'testing'
        }
    }
    stages {
        stage('Build Config Test') {
            when { changeset "spring-petclinic-config-server/**" }
            steps {
                container('docker') {
                    sh '''
                    #sh scripts/devops/build_image.sh $CONFIG_DOCKER_IMAGE local
                    sh scripts/devops/build_image.sh $CONFIG_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    '''
                }
            }
        }
        stage('Build Discovery Test') {
            when { changeset "spring-petclinic-discovery-server/**" }
            steps {
                container('docker') {
                    sh '''
                    #sh scripts/devops/build_image.sh $DISCOVERY_DOCKER_IMAGE local
                    sh scripts/devops/build_image.sh $DISCOVERY_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    '''
                }
            }
        }
        stage('Build Cusmomers Test') {
            when { changeset "spring-petclinic-customers-service/**" }
            steps {
                container('docker') {
                    sh '''
                    sh scripts/devops/build_image.sh $CUSTOMERS_DOCKER_IMAGE local
                    '''
                }
            }
        }
        stage('Build Vets Test') {
            when { changeset "spring-petclinic-vets-service/**" }
            steps {
                container('docker') {
                    sh '''
                    sh scripts/devops/build_image.sh $VETS_DOCKER_IMAGE local
                    '''
                }
            }
        }
        stage('Build Visits Test') {
            when { changeset "spring-petclinic-visits-service/**" }
            steps {
                container('docker') {
                    sh '''
                    sh scripts/devops/build_image.sh $VISITS_DOCKER_IMAGE local
                    '''
                }
            }
        }
        
        stage('Build Admin Test') {
            when { changeset "spring-petclinic-admin-server/**" }
            steps {
                container('docker') {
                    sh '''
                    sh scripts/devops/build_image.sh $ADMIN_DOCKER_IMAGE local
                    '''
                }
            }
        }
        stage('Build Api-gateway Test') {
            when { changeset "spring-petclinic-api-gateway/**" }
            steps {
                container('docker') {
                    sh '''
                    sh scripts/devops/build_image.sh $APIGATEWAY_DOCKER_IMAGE local
                    '''
                }
            }
        }
        stage('Push Config Test') {
            when { changeset "spring-petclinic-config-server/**" }
            steps {
                container('docker') {
                    sh '''
                    docker login -u $DOCKER_ID -p $DOCKER_PASS
                    docker push $DOCKER_ID/$CONFIG_DOCKER_IMAGE-image:$DOCKER_TAG
                    #sh scripts/devops/build_image.sh $CONFIG_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    '''
                }
            }
        }
        stage('Push Discovery Test') {
            when { changeset "spring-petclinic-discovery-server/**" }
            steps {
                container('docker') {
                    sh '''
                    docker login -u $DOCKER_ID -p $DOCKER_PASS
                    #sh scripts/devops/build_image.sh $DISCOVERY_DOCKER_IMAGE local
                    #sh scripts/devops/build_image.sh $DISCOVERY_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    docker push $DOCKER_ID/$DISCOVERY_DOCKER_IMAGE-image:$DOCKER_TAG
                    '''
                }
            }
        }
        
        stage('Deploy Config in Testing') {
            when { changeset "spring-petclinic-config-server/**" }
            environment
            {
                NS = 'testing'
            }
            steps {
                container('helm') { 
                    sh '''
                    # Config Server deployment
                    cp kubernetes/helm/config-server/values.yaml values.yml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml
                    
                    helm upgrade --install config-server kubernetes/helm/config-server --values=values.yml --create-namespace --namespace $NS
                    '''
                }
            }
        }
        stage('Deploy  Discovery in Testing') {
            when { changeset "spring-petclinic-discovery-server/**" }
            environment
            {
                NS = 'testing'
            }
            steps {
                container('helm') { 
                    sh '''
                    # Discovery Server deployment
                    cp kubernetes/helm/discovery-server/values.yaml values.yml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml
                    helm upgrade --install discovery-server kubernetes/helm/discovery-server --values=values.yml --create-namespace --namespace $NS
                    '''
                }
            }
        }


        
        stage('Clean up in Testing environment') {
            environment
            {
                NS = 'testing'
            }
            steps {
                container('kubectl') { 
                    sh '''
                    # Suppression des pods en failed:
                    #kubectl delete pods -n $NS --field-selector=status.phase=Failed
                    # Supprimer les replicaset avec desired state 0:
                    kubectl -n $NS delete rs $(kubectl -n $NS get rs | awk '{if ($2 + $3 + $4 == 0) print $1}' | grep -v 'NAME')
                    '''
                }
            }
        }
    }
}

 
                   