/*
* PIPELINE TESTING : rataché à la branche dev (développement)
*/
pipeline { 
    environment
    {
        PETCLINIC_HOME = "/home/jenkins/agent/workspace/petclinic-testing" 
        DOCKER_ID = "agdgpn" 
        CONFIG_DOCKER_IMAGE = "config"
        DISCOVERY_DOCKER_IMAGE = "discovery"
        CUSTOMERS_DOCKER_IMAGE = "customers"
        VETS_DOCKER_IMAGE = "vets"
        VISITS_DOCKER_IMAGE = "visits"
        ADMIN_DOCKER_IMAGE = "admin"
        APIGATEWAY_DOCKER_IMAGE = "api-gateway"
        DOCKER_TAG = "testing-v.${BUILD_ID}.0"                            // Tag build images
        DOCKER_PASS = credentials("DOCKER_HUB_PASS")                      // Token dockerhub stocké dans jenkins master
        NS = 'testing'                                                    // Namespace environnement cible
        MIDDLEWARE_NS = 'kube-system'                                     // Namespace du middleware
    }                
    agent {
        kubernetes {
            cloud 'testing-kube'
            yamlFile 'pipeline/jenkins/agent/testing/pod.yaml'
            serviceAccount 'jenkins-admin'
            namespace "testing"
        }
    }
    stages {
        stage('Build config & discovery'){
        parallel {
            stage('Build Config image for testing') {
                when { changeset "spring-petclinic-config-server/**" }
                agent { label "docker-agent-a" }
                steps {
                    sh '''
                    ./scripts/devops/build_image.sh $CONFIG_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    '''
                }
            }
            stage('Build Discovery image for testing') {
                when { changeset "spring-petclinic-discovery-server/**" }
                agent { label "docker-agent-b" }
                steps {
                    sh '''
                    sh scripts/devops/build_image.sh $DISCOVERY_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    '''
                }
            }
        }}
        stage('Build customers & vets'){
        parallel{
            
            stage('Build Cusmomers image for testing') {
                when { changeset "spring-petclinic-customers-service/**" }
                agent { label "docker-agent-a" }
                steps {
                    sh '''
                    sh scripts/devops/build_image.sh $CUSTOMERS_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    '''
                }
            }
            stage('Build Vets image for testing') {
                when { changeset "spring-petclinic-vets-service/**" }
                agent { label "docker-agent-b" }
                steps {
                    sh '''
                    sh scripts/devops/build_image.sh $VETS_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    '''
                }
            }
        }
        }
        stage('Build visits & admin'){
        parallel{
            stage('Build Visits image for testing') {
                when { changeset "spring-petclinic-visits-service/**" }
                agent { label "docker-agent-a" }
                steps {
                    sh '''
                    sh scripts/devops/build_image.sh $VISITS_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    '''
                }
            }           
            stage('Build Admin image for testing') {
                when { changeset "spring-petclinic-admin-server/**" }
                agent { label "docker-agent-b" }
                steps {
                    sh '''
                    sh scripts/devops/build_image.sh $ADMIN_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                    '''
                }
            }
        }
        }
        stage('Build Api-gateway image for testing') {
            when { changeset "spring-petclinic-api-gateway/**" }
            agent { label "docker-agent-a" }
            steps {
                sh '''
                sh scripts/devops/build_image.sh $APIGATEWAY_DOCKER_IMAGE dockerhub $DOCKER_ID $DOCKER_TAG
                '''
            }
        }

        stage('Push Config image for testing') {
            when { changeset "spring-petclinic-config-server/**" }
            agent { label "docker-agent-a" }
            steps {
                sh '''
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$CONFIG_DOCKER_IMAGE-image:$DOCKER_TAG
                '''
            }
        }
        stage('Push Discovery image for testing') {
            when { changeset "spring-petclinic-discovery-server/**" }
            agent { label "docker-agent-b" }
            steps {
                sh '''
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$DISCOVERY_DOCKER_IMAGE-image:$DOCKER_TAG
                '''
            }
        }
        stage('Push Customers image for testing') {
            when { changeset "spring-petclinic-customers-service/**" }
            agent { label "docker-agent-a" }
            steps {
                sh '''
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$CUSTOMERS_DOCKER_IMAGE-image:$DOCKER_TAG
                '''
            }
        }
        stage('Push Vets image for testing') {
            when { changeset "spring-petclinic-vets-service/**" }
            agent { label "docker-agent-b" }
            steps {
                sh '''
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$VETS_DOCKER_IMAGE-image:$DOCKER_TAG
                '''
            }
        }
        stage('Push Visits image for testing') {
            when { changeset "spring-petclinic-visits-service/**" }
            agent { label "docker-agent-a" }
            steps {
                sh '''
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$VISITS_DOCKER_IMAGE-image:$DOCKER_TAG
                '''
            }
        }
        stage('Push Admin image for testing') {
            when { changeset "spring-petclinic-admin-server/**" }
            agent { label "docker-agent-b" }
            steps {
                sh '''
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$ADMIN_DOCKER_IMAGE-image:$DOCKER_TAG
                '''
            }
        }
        stage('Push Api-Gateway image for testing') {
            when { changeset "spring-petclinic-api-gateway/**" }
            agent { label "docker-agent-a" }
            steps {
                sh '''
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push $DOCKER_ID/$APIGATEWAY_DOCKER_IMAGE-image:$DOCKER_TAG
                    '''
            }
        }

        // Déploiement de MYSQL sur l'environnement de TESTING si pas encore fait.
        stage('Check/install MySQL in testing'){
            steps {
                container('helm') { 
                    script {
                        try {
                            sh '''
                            # Mysql deployment if its not already deployed
                            helm status mysql-server -n testing
                            '''
                        } catch (err) {
                            echo "Message: ${err}"
                            echo "Deploying mysql in testing ns .."
                            sh '''
                            cp kubernetes/helm/mysql-server/values.yaml values.yml
                            helm upgrade --install mysql-server kubernetes/helm/mysql-server --values=values.yml --create-namespace --namespace testing 
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Deploy Config app in testing') {
            when { changeset "spring-petclinic-config-server/**" }
            steps {
                container('helm') { 
                    sh '''
                    # Config Server deployment
                    cp kubernetes/helm/config-server/values.yaml values.yml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml                    
                    helm upgrade --install config-server kubernetes/helm/config-server --values=values.yml --create-namespace --namespace $NS
                    '''
                }
            }
        }
        stage('Deploy Discovery app in testing') {
            when { changeset "spring-petclinic-discovery-server/**" }
            steps {
                container('helm') { 
                    sh '''
                    # Discovery Server deployment
                    cp kubernetes/helm/discovery-server/values.yaml values.yml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml
                    helm upgrade --install discovery-server kubernetes/helm/discovery-server --values=values.yml --create-namespace --namespace $NS
                    '''
                }
            }
        }
        stage('Deploy Customers app in testing') {
            when { changeset "spring-petclinic-customers-service/**" }
            steps {
                container('helm') { 
                    sh '''
                    # Customers Service deployment
                    cp kubernetes/helm/customers-service/values.yaml values.yml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml                    
                    helm upgrade --install customers-service kubernetes/helm/customers-service --values=values.yml --create-namespace --namespace $NS
                    '''
                }
            }
        }
        stage('Deploy Vets app in testing') {
            when { changeset "spring-petclinic-vets-service/**" }
            steps {
                container('helm') { 
                    sh '''
                    # Vets Service deployment
                    cp kubernetes/helm/vets-service/values.yaml values.yml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml                    
                    helm upgrade --install vets-service kubernetes/helm/vets-service --values=values.yml --create-namespace --namespace $NS
                    '''
                }
            }
        }
        stage('Deploy Visits app in testing') {
            when { changeset "spring-petclinic-visits-service/**" }
            steps {
                container('helm') { 
                    sh '''
                    # Visits Service deployment
                    cp kubernetes/helm/visits-service/values.yaml values.yml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml                    
                    helm upgrade --install visits-service kubernetes/helm/visits-service --values=values.yml --create-namespace --namespace $NS
                    '''
                }
            }
        }
        stage('Deploy Admin app in testing') {
            when { changeset "spring-petclinic-admin-server/**" }
            steps {
                container('helm') { 
                    sh '''
                    # Visits Service deployment
                    cp kubernetes/helm/admin-server/values.yaml values.yml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml                    
                    helm upgrade --install admin-server kubernetes/helm/admin-server --values=values.yml --create-namespace --namespace $NS
                    '''
                }
            }
        }
        stage('Deploy Api-gateway app in testing') {
            when { changeset "spring-petclinic-api-gateway/**" }
            steps {
                container('helm') { 
                    sh '''
                    # Visits Service deployment
                    cp kubernetes/helm/api-gateway/values.yaml values.yml
                    sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml   
                    sed -i "s+traefik.ingress.kubernetes.io/router.middlewares.*+traefik.ingress.kubernetes.io/router.middlewares: $MIDDLEWARE_NS-services-strip@kubernetescrd+g" kubernetes/helm/api-gateway/templates/ingress.yaml 
                    cat kubernetes/helm/api-gateway/templates/ingress.yaml                 
                    helm upgrade --install api-gateway kubernetes/helm/api-gateway --values=values.yml --create-namespace --namespace $NS
                    '''
                }
            }
        }
        stage('Api-gateway accessibility in testing') {
            steps {
                    sh '''
                    sleep 20
                    ./scripts/devops/test_accessibilite.sh http://a1d4dbfe7d26b4d3b9c169eabbe4cbce-5d266d23f38e6011.elb.eu-west-3.amazonaws.com
                    '''
            }
        }
    }
}

 
                   